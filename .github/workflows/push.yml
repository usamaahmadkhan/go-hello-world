name: CD

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
env:
  DOCKER_FILE_PATH: Dockerfile
  GOLANG_VERSION: 1.18

jobs:
  CD:
    runs-on: ubuntu-latest
    name: Build
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
    steps:
    - name: Check out code
      uses: actions/checkout@v2
      with:
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
        fetch-depth: 0 # otherwise, you will fail to push refs to dest repo

    - name: Set up Go
      id: go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    # Run Linter
    - name: Lint
      uses: golangci/golangci-lint-action@v2.3.0
      with:
        version: v1.45.2
        only-new-issues: false
        args: --timeout 10m

    # Run Preliminary code tests
    - name: Static code Analysis
      run: make vet

    # Run Vulnerability analysis tests
    - name: Vulnerability Analysis
      uses: snyk/actions/golang@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    # Run Tests
    - name: Test
      run: make test

    # Generate Tag for Image
    - name: Generate Tag
      id: generate_tag
      uses: anothrNick/github-tag-action@1.36.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        DEFAULT_BUMP: patch
        RELEASE_BRANCHES: main
        DRY_RUN: true

    # Setup Emulator
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    # Setup docker buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Image Registry login
    - name: Login to Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Generate docker tag
    - name: Generate image repository path
      run: |
        echo IMAGE_REPOSITORY=$(echo ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ${{ env.DOCKER_FILE_PATH  }}
        pull: true
        push: true
        build-args: GIT_ACCESS_TOKEN=${{ secrets.GITHUB_TOKEN }}
        cache-to: type=inline
        tags: |
          ${{ env.IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.new_tag }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

    # Setting up helm binary
    - name: Set up Helm
      uses: azure/setup-helm@v1

    # Generate manifests for the latest semver tag
    - name: Bump Version
      env:
        VERSION: ${{ steps.generate_operator_tag.outputs.new_tag }}
      run: make manifests

    # Commit back changes
    - name: Commit files
      run: |
        git config --local user.email "usama.ahmad.khan@hotmail.com"
        git config --local user.name "usamaahmadkhan"
        git status
        git add .
        git commit -m "[skip-ci] Update artifacts" -a

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main

    - name: Push Latest Tag
      uses: anothrNick/github-tag-action@1.36.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        RELEASE_BRANCHES: main
        DEFAULT_BUMP: patch

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always() # Pick up events even if the job fails or is canceled.
      with:
        status: ${{ job.status }}
        fields: repo,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}