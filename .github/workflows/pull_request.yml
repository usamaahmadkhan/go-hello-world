name: Pull Request

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'

env:
  DOCKER_FILE_PATH: Dockerfile
  GOLANG_VERSION: 1.17

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Go
      id: go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    # Run Linter
    - name: Lint
      run: make lint

    # Run Static code analysis
    - name: Static Code Analysis
      run: make vet

    # Run Tests
    - name: Test
      run: make test

    # Set up helm binary
    - name: Set up Helm
      uses: azure/setup-helm@v1

    # Generate Tag for Image
    - name: Generate Tag
      id: generate_tag
      run: |
        sha=${{ github.event.pull_request.head.sha }}
        tag="SNAPSHOT-PR-${{ github.event.pull_request.number }}-${sha:0:8}"
        echo "##[set-output name=GIT_TAG;]$(echo ${tag})"
      
    # Setup Emulator
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    # Setup docker buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Setup docker buildx
    - name: Login to Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Generate docker tag
    - name: Generate image repository path
      run: |
        echo IMAGE_REPOSITORY=$(echo ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ${{ env.DOCKER_FILE_PATH  }}
        pull: true
        push: true
        build-args: GIT_ACCESS_TOKEN=${{ secrets.GITHUB_TOKEN }}
        cache-to: type=inline
        tags: |
          ${{ env.IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_TAG }}
        labels: |
          org.opencontainers.image.source=${{ github.event.repository.clone_url }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Comment on PR
      uses: mshick/add-pr-comment@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        message: '@${{ github.actor }} Build Passed!! Image is available for testing! `docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}:${{ steps.generate_tag.outputs.GIT_TAG }}`'
        allow-repeats: false

    - name: Notify Failure
      if: failure()
      uses: mshick/add-pr-comment@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        message: '@${{ github.actor }} Build Failed!! [Build](https://github.com/${{ github.repository }}/commit/${{ github.event.pull_request.head.sha }}/checks) has Failed!'
        allow-repeats: false

    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      if: always() # Pick up events even if the job fails or is canceled.
      with:
        status: ${{ job.status }}
        fields: repo,author,action,eventName,ref,workflow
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}